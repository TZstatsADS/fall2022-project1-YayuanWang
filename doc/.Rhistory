hist(generate.t(n=10))
hist(generate.t(n=30))
hist(generate.t(n=100))
hist(generate.t(n=1000))
acf(MA_data$X)
pacf(MA_data$X)
ia(MA_data$X, 4)
my.Yule.Walker(Data1$X,3)
yw(Data1$X, 3)    # double check with built-in function
my.Yule.Walker(Data2$X,3)
yw(Data2$X, 3)    # double check with built-in function
phi.1 <- my.Yule.Walker(Data2$X, 1)$phi.hat
phi.2 <- my.Yule.Walker(Data2$X, 2)$phi.hat
phi.3 <- my.Yule.Walker(Data2$X, 3)$phi.hat
phi.4 <- my.Yule.Walker(Data2$X, 4)$phi.hat
phi.5 <- my.Yule.Walker(Data2$X, 5)$phi.hat
my.phi.table <- data.frame(
orders = c ("1","2","3","4","5"),
phi1 = c(phi.1[[1]],phi.2[[1]],phi.3[[1]],phi.4[[1]],phi.5[[1]]),
phi2 = c(NA,phi.2[[2]],phi.3[[2]],phi.4[[2]],phi.5[[2]]),
phi3 = c(NA,NA,phi.3[[3]],phi.4[[3]],phi.5[[3]]),
phi4 = c(NA,NA,NA,phi.4[[4]],phi.5[[4]]),
phi5 = c(NA,NA,NA,NA,phi.5[[5]]),
stringsAsFactors = FALSE
)
my.phi.table
my.Yule.Walker(Data1$X,1)
qnorm(0.975, mean = 0, sd = 1, lower.tail = TRUE)   # 95% confidence interval
n <- nrow(Data1)
phi_hat <- my.Yule.Walker(Data1$X,1)$phi.hat[[1]]
phi_hat - sqrt(my.Yule.Walker(Data1$X,1)$sigma2) * 1.96 * (1/sqrt(n))
phi_hat + sqrt(my.Yule.Walker(Data1$X,1)$sigma2) * 1.96 * (1/sqrt(n))
RW <- function(N, x0, mu, variance) {
z<-cumsum(rnorm(n=N, mean=0,
sd=sqrt(variance)))
t<-1:N
x<-x0+t*mu+z
return(c(x0,x))}
estimated.phi <- function(x) {
n <- length(x)-1
numerator <- sum(x[1:n+1] * x[1:n])
denominator <- sum(x[1:n]^2)
return(numerator/denominator)
}
estimated.S <- function(x){
n <- length(x)-1
my.sum <- sum((x[1:n+1]-estimated.phi(x)*x[1:n])^2)
return(my.sum/n)
}
T.n <- function(x){
n <- length(x) -1
numerator <- estimated.phi(x)-1
denominator <- sqrt(estimated.S(x)/sum(x[1:n]^2))
return(numerator/denominator)
}
generate.t <- function(n, R = 10000) {
vector.T <- rep(NA, R)
for (i in 1:R){
rw <- RW(N=n, x0 = 0, mu = 0, variance = 1)
vector.T[i] <- T.n(rw)
}
return(vector.T)
}
par(mfrow = c(2, 2))
hist(generate.t(n=10))
hist(generate.t(n=30))
hist(generate.t(n=100))
hist(generate.t(n=1000))
acf(MA_data$X)
pacf(MA_data$X)
ia(MA_data$X, 4)
phi.5
phi.4
my.Yule.Walker(Data2$X, 1)
my.Yule.Walker(Data2$X, 1)$sigma2
sigma.1 <- my.Yule.Walker(Data2$X, 1)$sigma2
sigma.2 <- my.Yule.Walker(Data2$X, 2)$sigma2
sigma.3 <- my.Yule.Walker(Data2$X, 3)$sigma2
sigma.4 <- my.Yule.Walker(Data2$X, 4)$sigma2
sigma.5 <- my.Yule.Walker(Data2$X, 5)$sigma2
my.phi.table <- data.frame(
orders = c ("1","2","3","4","5"),
phi1 = c(phi.1[[1]],phi.2[[1]],phi.3[[1]],phi.4[[1]],phi.5[[1]]),
phi2 = c(NA,phi.2[[2]],phi.3[[2]],phi.4[[2]],phi.5[[2]]),
phi3 = c(NA,NA,phi.3[[3]],phi.4[[3]],phi.5[[3]]),
phi4 = c(NA,NA,NA,phi.4[[4]],phi.5[[4]]),
phi5 = c(NA,NA,NA,NA,phi.5[[5]]),
sigma = c(sigma.1, sigma.2, sigma.3, sigma.4, sigma.5)
stringsAsFactors = FALSE
phi.1 <- my.Yule.Walker(Data2$X, 1)$phi.hat
phi.2 <- my.Yule.Walker(Data2$X, 2)$phi.hat
phi.3 <- my.Yule.Walker(Data2$X, 3)$phi.hat
phi.4 <- my.Yule.Walker(Data2$X, 4)$phi.hat
phi.5 <- my.Yule.Walker(Data2$X, 5)$phi.hat
sigma.1 <- my.Yule.Walker(Data2$X, 1)$sigma2
sigma.2 <- my.Yule.Walker(Data2$X, 2)$sigma2
sigma.3 <- my.Yule.Walker(Data2$X, 3)$sigma2
sigma.4 <- my.Yule.Walker(Data2$X, 4)$sigma2
sigma.5 <- my.Yule.Walker(Data2$X, 5)$sigma2
my.phi.table <- data.frame(
orders = c ("1","2","3","4","5"),
phi1 = c(phi.1[[1]],phi.2[[1]],phi.3[[1]],phi.4[[1]],phi.5[[1]]),
phi2 = c(NA,phi.2[[2]],phi.3[[2]],phi.4[[2]],phi.5[[2]]),
phi3 = c(NA,NA,phi.3[[3]],phi.4[[3]],phi.5[[3]]),
phi4 = c(NA,NA,NA,phi.4[[4]],phi.5[[4]]),
phi5 = c(NA,NA,NA,NA,phi.5[[5]]),
sigma = c(sigma.1, sigma.2, sigma.3, sigma.4, sigma.5)
stringsAsFactors = FALSE
my.phi.table <- data.frame(
orders = c ("1","2","3","4","5"),
phi1 = c(phi.1[[1]],phi.2[[1]],phi.3[[1]],phi.4[[1]],phi.5[[1]]),
phi2 = c(NA,phi.2[[2]],phi.3[[2]],phi.4[[2]],phi.5[[2]]),
phi3 = c(NA,NA,phi.3[[3]],phi.4[[3]],phi.5[[3]]),
phi4 = c(NA,NA,NA,phi.4[[4]],phi.5[[4]]),
phi5 = c(NA,NA,NA,NA,phi.5[[5]]),
sigma = c(sigma.1, sigma.2, sigma.3, sigma.4, sigma.5),
stringsAsFactors = FALSE
)
my.phi.table
qnorm(0.975, mean = 0, sd = 1, lower.tail = TRUE)   # 95% confidence interval
qnorm(0.975)
yw(Data2$X, 3)
yw(Data2$X, 3)
yw(Data2$X, 3)$sigma2
phi_hat
yw(Data2$X, 3)$sigma2
yw(Data1$X,1)$sigma2
phi_hat
yw(Data1$X,1)$sigma2
yw(Data1$X,1)
yw(Data1$X,1)$phi
phi_hat
yw(Data1$X,1)$phi
n <- nrow(Data1)
phi_hat <- my.Yule.Walker(Data1$X,1)$phi.hat[[1]]
phi_hat - sqrt(my.Yule.Walker(Data1$X,1)$sigma2) * 1.96 * (1/sqrt(n))
phi_hat + sqrt(my.Yule.Walker(Data1$X,1)$sigma2) * 1.96 * (1/sqrt(n))
yw(Data2$X, 3)    # double check with built-in function
yw(Data2$X, 3)$sigma2
n <- length(Data2$X)
yw(Data2$X, 3)$sigma2 * n/(n+1)
n <- length(Data2$X)
yw(Data2$X, 3)$sigma2 * n/(n+1)
yw(Data2$X, 3)$sigma2 * (n+1)/n
n <- length(Data2$X)
yw(Data2$X, 3)$sigma2 * (n+1)/n
Data.acf <- acf(Data2$X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf
Data.cor.matrix
p <- 3
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
solve(cor.matrix) %*% rho.matrix
Data.acf <- acf(Data1$X, type="covariance", plot = FALSE)
Data.cov.matrix <- Data.acf$acf
sigma2 <- Data.cov.matrix[1] * (1- t(rho.matrix) %*% solve(cor.matrix) %*% rho.matrix )
sigma2[[1]]
p <- 3
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
solve(cor.matrix) %*% rho.matrix
p <- 3
Matrix.rho <- rep(NA,p^2)                # correlation matrix
Matrix.rho
cor.matrix
Data.acf <- acf(Data2$X, type="covariance", plot = FALSE)
Data.cor.matrix <- Data.acf$acf
Data.cor.matrix
p <- 3
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
cor.matrix
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
solve(cor.matrix) %*% rho.matrix
Data.acf <- acf(Data2$X, type="covariance", plot = FALSE)
Data.cor.matrix <- Data.acf$acf
Data.cor.matrix
p <- 3
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
solve(cor.matrix) %*% rho.matrix
my.Yule.Walker(Data1$X,1)
yw(Data1$X, 1)    # double check with built-in function
my.Yule.Walker(Data2$X,3)
Data.acf <- acf(Data1$X, type="covariance", plot = FALSE)
Data.cov.matrix <- Data.acf$acf
sigma2 <- Data.cov.matrix[1] * (1- t(rho.matrix) %*% solve(cor.matrix) %*% rho.matrix )
sigma2[[1]]
acf(Data2$X, plot = FALSE)
Data.cor.matrix
acf(Data2$X, plot = FALSE)
Data.acf <- acf(Data2$X, type="correlation", plot = FALSE)
Data.cor.matrix
acf(Data2$X, plot = FALSE)
Data.cor.matrix
acf(Data2$X, plot = FALSE)
Data.acf <- acf(Data2$X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf
Data.cor.matrix
acf(Data2$X, plot = FALSE)
Data.acf <- acf(Data2$X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf
Data.cor.matrix
Data.acf <- acf(Data2$X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf
Data.cor.matrix
p <- 3
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
solve(cor.matrix) %*% rho.matrix
Data.acf <- acf(Data2$X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf
Data.cor.matrix
p <- 3
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
solve(cor.matrix) %*% rho.matrix
Data.acf <- acf(Data2$X, type="covariance", plot = FALSE)
Data.cov.matrix <- Data.acf$acf
sigma2 <- Data.cov.matrix[1] * (1- t(rho.matrix) %*% solve(cor.matrix) %*% rho.matrix )
sigma2[[1]]
my.Yule.Walker <- function(X,P){
Data.acf <- acf(X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf                        # correlation
p <- P
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
phi <- solve(cor.matrix) %*% rho.matrix
Data.acf <- acf(X$X, type="covariance", plot = FALSE)      # covariance
Data.cov.matrix <- Data.acf$acf
sigma2 <- Data.cov.matrix[1] * (1- t(rho.matrix) %*% solve(cor.matrix) %*% rho.matrix )
my.list <- list("phi.hat" = phi, sigma2 = sigma2[[1]])
return(my.list)
}
my.Yule.Walker(Data1$X,1)
my.Yule.Walker <- function(X,P){
Data.acf <- acf(X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf                        # correlation
p <- P
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
phi <- solve(cor.matrix) %*% rho.matrix
Data.acf <- acf(X, type="covariance", plot = FALSE)      # covariance
Data.cov.matrix <- Data.acf$acf
sigma2 <- Data.cov.matrix[1] * (1- t(rho.matrix) %*% solve(cor.matrix) %*% rho.matrix )
my.list <- list("phi.hat" = phi, sigma2 = sigma2[[1]])
return(my.list)
}
my.Yule.Walker(Data1$X,1)
yw(Data1$X, 1)    # double check with built-in function
my.Yule.Walker(Data2$X,3)
yw(Data2$X, 3)    # double check with built-in function
phi.1 <- my.Yule.Walker(Data2$X, 1)$phi.hat
phi.2 <- my.Yule.Walker(Data2$X, 2)$phi.hat
phi.3 <- my.Yule.Walker(Data2$X, 3)$phi.hat
phi.4 <- my.Yule.Walker(Data2$X, 4)$phi.hat
phi.5 <- my.Yule.Walker(Data2$X, 5)$phi.hat
sigma.1 <- my.Yule.Walker(Data2$X, 1)$sigma2
sigma.2 <- my.Yule.Walker(Data2$X, 2)$sigma2
sigma.3 <- my.Yule.Walker(Data2$X, 3)$sigma2
sigma.4 <- my.Yule.Walker(Data2$X, 4)$sigma2
sigma.5 <- my.Yule.Walker(Data2$X, 5)$sigma2
my.phi.table <- data.frame(
orders = c ("1","2","3","4","5"),
phi1 = c(phi.1[[1]],phi.2[[1]],phi.3[[1]],phi.4[[1]],phi.5[[1]]),
phi2 = c(NA,phi.2[[2]],phi.3[[2]],phi.4[[2]],phi.5[[2]]),
phi3 = c(NA,NA,phi.3[[3]],phi.4[[3]],phi.5[[3]]),
phi4 = c(NA,NA,NA,phi.4[[4]],phi.5[[4]]),
phi5 = c(NA,NA,NA,NA,phi.5[[5]]),
sigma = c(sigma.1, sigma.2, sigma.3, sigma.4, sigma.5),
stringsAsFactors = FALSE
)
my.phi.table
my.Yule.Walker(Data1$X,1)
qnorm(0.975, mean = 0, sd = 1, lower.tail = TRUE)   # 95% confidence interval
n <- nrow(Data1)
phi_hat <- my.Yule.Walker(Data1$X,1)$phi.hat[[1]]
phi_hat - sqrt(my.Yule.Walker(Data1$X,1)$sigma2) * 1.96 * (1/sqrt(n))
phi_hat + sqrt(my.Yule.Walker(Data1$X,1)$sigma2) * 1.96 * (1/sqrt(n))
n <- nrow(Data1)
phi_hat <- my.Yule.Walker(Data1$X,1)$phi.hat[[1]]
phi_hat - sqrt(my.Yule.Walker(Data1$X,1)$sigma2) * qnorm(0.975) * (1/sqrt(n))
phi_hat + sqrt(my.Yule.Walker(Data1$X,1)$sigma2) * qnorm(0.975) * (1/sqrt(n))
my.Yule.Walker(Data1$X,1)
acf(Data1$X, type = "covariance", plot = FALSE)
acf(Data1$X, type="covariance", plot = FALSE)
acf(Data1$X, type="covariance", plot = FALSE)$acf
acf(Data1$X, type="covariance", plot = FALSE)$acf[1]
acf(Data1$X, type="covariance", plot = FALSE)$acf[1]
Gamma.p <- acf(Data1$X, type="covariance", plot = FALSE)$acf[1]
Gamma.p <- acf(Data1$X, type="covariance", plot = FALSE)$acf[1]
sigma2.adj <- 1/(n) * my.Yule.Walker(Data1$X,1)$sigma2 %*% solve(Gamma.p)
sigma2.adj
sigma2.adj
sigma2.adj
sigma2.adj[1]
sigma2.adj[1,1]
n <- nrow(Data1)
Gamma.p <- acf(Data1$X, type="covariance", plot = FALSE)$acf[1]
sigma2.adj <- 1/(n) * my.Yule.Walker(Data1$X,1)$sigma2 %*% solve(Gamma.p)
phi_hat <- my.Yule.Walker(Data1$X,1)$phi.hat[[1]]
phi_hat - sqrt(sigma2.adj[1,1]) * qnorm(0.975)
phi_hat + sqrt(sigma2.adj[1,1]) * qnorm(0.975)
Data.acf <- acf(Data2$X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf
p <- 3
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
solve(cor.matrix) %*% rho.matrix
Data.acf <- acf(Data2$X, type="covariance", plot = FALSE)
Data.cov.matrix <- Data.acf$acf
sigma2 <- Data.cov.matrix[1] * (1- t(rho.matrix) %*% solve(cor.matrix) %*% rho.matrix )
sigma2[[1]]
# steps helping to build the function
Data.acf <- acf(Data2$X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf
p <- 3
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
solve(cor.matrix) %*% rho.matrix
Data.acf <- acf(Data2$X, type="covariance", plot = FALSE)
Data.cov.matrix <- Data.acf$acf
sigma2 <- Data.cov.matrix[1] * (1- t(rho.matrix) %*% solve(cor.matrix) %*% rho.matrix )
sigma2[[1]]
my.Yule.Walker <- function(X,P){
Data.acf <- acf(X, type="correlation", plot = FALSE)
Data.cor.matrix <- Data.acf$acf                        # correlation
p <- P
Matrix.rho <- rep(NA,p^2)                # correlation matrix
cor.matrix <- matrix(Matrix.rho,nrow=p,ncol=p)
for (j in 1:p){
for (i in 1:p) {
cor.matrix[i,j] <- Data.cor.matrix[abs(i-j)+1]}}
rho <- Data.cor.matrix[1:p+1]   # rho
rho.matrix <- as.matrix(rho)
phi <- solve(cor.matrix) %*% rho.matrix
Data.acf <- acf(X, type="covariance", plot = FALSE)      # covariance
Data.cov.matrix <- Data.acf$acf
sigma2 <- Data.cov.matrix[1] * (1- t(rho.matrix) %*% solve(cor.matrix) %*% rho.matrix )
my.list <- list("phi.hat" = phi, sigma2 = sigma2[[1]])
return(my.list)
}
my.Yule.Walker(Data1$X,1)
yw(Data1$X, 1)    # double check with built-in function
my.Yule.Walker(Data2$X,3)
yw(Data2$X, 3)    # double check with built-in function
phi.1 <- my.Yule.Walker(Data2$X, 1)$phi.hat
phi.2 <- my.Yule.Walker(Data2$X, 2)$phi.hat
phi.3 <- my.Yule.Walker(Data2$X, 3)$phi.hat
phi.4 <- my.Yule.Walker(Data2$X, 4)$phi.hat
phi.5 <- my.Yule.Walker(Data2$X, 5)$phi.hat
sigma.1 <- my.Yule.Walker(Data2$X, 1)$sigma2
sigma.2 <- my.Yule.Walker(Data2$X, 2)$sigma2
sigma.3 <- my.Yule.Walker(Data2$X, 3)$sigma2
sigma.4 <- my.Yule.Walker(Data2$X, 4)$sigma2
sigma.5 <- my.Yule.Walker(Data2$X, 5)$sigma2
my.phi.table <- data.frame(
orders = c ("1","2","3","4","5"),
phi1 = c(phi.1[[1]],phi.2[[1]],phi.3[[1]],phi.4[[1]],phi.5[[1]]),
phi2 = c(NA,phi.2[[2]],phi.3[[2]],phi.4[[2]],phi.5[[2]]),
phi3 = c(NA,NA,phi.3[[3]],phi.4[[3]],phi.5[[3]]),
phi4 = c(NA,NA,NA,phi.4[[4]],phi.5[[4]]),
phi5 = c(NA,NA,NA,NA,phi.5[[5]]),
sigma = c(sigma.1, sigma.2, sigma.3, sigma.4, sigma.5),
stringsAsFactors = FALSE
)
my.phi.table
generate.t <- function(n, R = 10000) {
vector.T <- rep(NA, R)
for (i in 1:R){
rw <- RW(N=n, x0 = 0, mu = 0, variance = 1)
vector.T[i] <- T.n(rw)
}
return(vector.T)
}
par(mfrow = c(2, 2))
hist(generate.t(n=10), bins=30)
hist(generate.t(n=30))
hist(generate.t(n=100))
hist(generate.t(n=1000))
hist(generate.t(n=10),breaks = 30)
generate.t <- function(n, R = 10000) {
vector.T <- rep(NA, R)
for (i in 1:R){
rw <- RW(N=n, x0 = 0, mu = 0, variance = 1)
vector.T[i] <- T.n(rw)
}
return(vector.T)
}
par(mfrow = c(2, 2))
hist(generate.t(n=10), breaks = 30)
hist(generate.t(n=30), breaks = 30)
hist(generate.t(n=100), breaks = 30)
hist(generate.t(n=1000), breaks = 30)
generate.t <- function(n, R = 10000) {
vector.T <- rep(NA, R)
for (i in 1:R){
rw <- RW(N=n, x0 = 0, mu = 0, variance = 1)
vector.T[i] <- T.n(rw)
}
return(vector.T)
}
par(mfrow = c(2, 2))
hist(generate.t(n=10), breaks = 30)
hist(generate.t(n=30), breaks = 30)
hist(generate.t(n=100), breaks = 30)
hist(generate.t(n=1000), breaks = 30)
generate.t <- function(n, R = 10000) {
vector.T <- rep(NA, R)
for (i in 1:R){
rw <- RW(N=n, x0 = 0, mu = 0, variance = 1)
vector.T[i] <- T.n(rw)
}
return(vector.T)
}
par(mfrow = c(2, 2))
hist(generate.t(n=10), breaks = 20)
hist(generate.t(n=30), breaks = 20)
hist(generate.t(n=100), breaks = 20)
hist(generate.t(n=1000), breaks = 20)
generate.t <- function(n, R = 10000) {
vector.T <- rep(NA, R)
for (i in 1:R){
rw <- RW(N=n, x0 = 0, mu = 0, variance = 1)
vector.T[i] <- T.n(rw)
}
return(vector.T)
}
par(mfrow = c(2, 2))
hist(generate.t(n=10), breaks = 25)
hist(generate.t(n=30), breaks = 25)
hist(generate.t(n=100), breaks = 25)
hist(generate.t(n=1000), breaks = 25)
generate.t <- function(n, R = 10000) {
vector.T <- rep(NA, R)
for (i in 1:R){
rw <- RW(N=n, x0 = 0, mu = 0, variance = 1)
vector.T[i] <- T.n(rw)
}
return(vector.T)
}
par(mfrow = c(2, 2))
hist(generate.t(n=10), breaks = 30)
hist(generate.t(n=30), breaks = 30)
hist(generate.t(n=100), breaks = 30)
hist(generate.t(n=1000), breaks = 30)
generate.t <- function(n, R = 10000) {
vector.T <- rep(NA, R)
for (i in 1:R){
rw <- RW(N=n, x0 = 0, mu = 0, variance = 1)
vector.T[i] <- T.n(rw)
}
return(vector.T)
}
par(mfrow = c(2, 2))
hist(generate.t(n=10))
hist(generate.t(n=30))
hist(generate.t(n=100))
hist(generate.t(n=1000))
ia(MA_data$X, 3)
ia(MA_data$X, 4)
ia(MA_data$X, 3)
library(tidyverse)
